local gravity = -20
local camera_id = "/camera#camera"

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(camera_id, "acquire_camera_focus")
	--msg.post("@system:", "toggle_physics_debug")
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	self.ladder_contact = false
	self.climbing = false
	self.actions = {}
	self.platform_contact_from_below = false
	self.platform_contact_from_below_last_frame = false
end

function final(self)
	msg.post(".", "release_input_focus")
	msg.post(camera_id, "release_camera_focus")
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	if self.actions[hash("left")] then
		self.velocity.x = -200
		sprite.set_hflip("#sprite", true)
	elseif self.actions[hash("right")] then
		self.velocity.x = 200
		sprite.set_hflip("#sprite", false)
	else
		self.velocity.x = 0
	end

	-- are we in contact with a ladder?
	if self.ladder_contact then
		-- set vertical velocity if we are climbing up or down
		-- also set flag to indicate that we are climbing
		if self.actions[hash("up")] then
			self.velocity.y = 150
			self.ground_contact = true
			self.climbing = true
		elseif self.actions[hash("down")] then
			self.velocity.y = -150
			self.ground_contact = true
			self.climbing = true
		elseif self.climbing then
			self.velocity.y = 0
		end
	else
		self.climbing = false
	end

	-- apply gravity if there's no ground contact and if we're not climbing a ladder
	if not self.ground_contact and not self.climbing then
		self.velocity = self.velocity + gravity
	end
	local pos = go.get_position()
	-- apply velocity to the player character
	go.set_position(pos + self.velocity * dt)

	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.ladder_contact = false

	go.set_position(pos + vmath.vector3(-500, -260, 0), camera_id)
end

-- from the platformer tutorial on defold.com
local function handle_geometry_contact(self, normal, distance)
	local proj = vmath.dot(self.correction, normal)
	local comp = (distance - proj) * normal
	self.correction = self.correction + comp
	go.set_position(go.get_position() + comp)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	proj = vmath.dot(self.velocity, normal)
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
		self.velocity.x = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("ground") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("platform") then
			if message.normal.y > 0 then
				if not self.platform_contact_from_below_last_frame then
					handle_geometry_contact(self, message.normal, message.distance)
					self.platform_contact_from_below = false
				else
					self.platform_contact_from_below = true
				end
			else
				self.platform_contact_from_below = true
			end
		elseif message.group == hash("ladder") then 
			self.ladder_contact = true
		end
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action.pressed then
			self.actions[action_id] = true
		elseif action.released then
			self.actions[action_id] = nil
		end
		if action_id == hash("trigger") and action.pressed then
			self.velocity.y = 500
		end
	end
end

function on_reload(self)
end

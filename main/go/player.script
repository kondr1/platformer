require("lib.helpers")
local platypus = require("platypus.platypus")
local input = require("in.state")
local input_mapper = require("in.mapper")
local triggers = require("in.triggers")
local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")

function init(self)
	input.acquire()
	input_mapper.bind(triggers.KEY_LEFT, LEFT)
	input_mapper.bind(triggers.KEY_RIGHT, RIGHT)
	input_mapper.bind(triggers.KEY_SPACE, JUMP)
	self.msgs = router()
	self.input = router()
	
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_SHAPES,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				-- [hash("platform")] = platypus.DIR_DOWN,
			},
			left = 7, right = 7, top = 14, bottom = 14, offset = vmath.vector3(0, 0, 0)
		},
		gravity = -800,
		max_velocity = 280,
		--allow_double_jump = false,
		--allow_wall_jump = false,
		--allow_wall_slide = false,
		--wall_slide_gravity = -50
	})

	function ground_contact()
		return self.platypus.has_ground_contact()
	end
	
	function left()
		self.platypus.left(ground_contact() and 120 or 100)
	end
	function right()
		self.platypus.right(ground_contact() and 120 or 100)
	end
	self.input.on(JUMP, function (action)
		if action.pressed then
			self.platypus.jump(3000)
			self.fsm.changeState("jump")
		elseif action.released then
			self.platypus.abort_jump()
		end
		if ground_contact() then
			self.platypus.abort_jump()
			self.fsm.changeState("quite")
		end
	end)


	self.fsm = finiteStateMachine("quite")
	.add("quite", function (changeState, dt)
		self.input
		.on(LEFT, function ()
			left()
			changeState("run")
		end)
		.on(RIGHT, function ()
			right()
			changeState("run")
		end)
		msg.post("#sprite", "play_animation", { id =  "idle" })
	end)
	.add("run", function (changeState, dt)
		function wrap(dir)
				return function(action)
					if action.released then
						changeState("quite")
					else return dir()
				end
			end
		end
		self.input
		.on(LEFT, wrap(left))
		.on(RIGHT, wrap(right))
		msg.post("#sprite", "play_animation", { id =  "run-left" })
	end)
	.add("jump", function (changeState, dt)
		self.input
		.on(LEFT, left)
		.on(RIGHT, right)
		msg.post("#sprite", "play_animation", { id =  "jump" })
	end)
end

function final(_)
end

function update(self, dt)
	self.platypus.update(dt)
	self.fsm.proc(dt)
end

function on_message(self, message_id, message, sender)
	self.msgs.proc(message_id, message, sender)
end

function on_input(self, action_id, action)
	action_id = input_mapper.on_input(action_id)
	input.on_input(action_id, action)
	self.input.proc(action_id, action)
end

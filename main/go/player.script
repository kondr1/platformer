require("lib.helpers")
require("lib.common")
local platypus = require("platypus.platypus")
local input = require("in.state")
local input_mapper = require("in.mapper")
local triggers = require("in.triggers")
local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")

function init(self)

	msg.post("/defluid", "activate")	-- activate creation of metaballs (fluid)
	msg.post("/defluid", "change", { dry_each_after = 1 })	-- change param of defluid
	timer.delay(6, false, function() 	-- after 6 s push up all metaballs
		msg.post("/defluid", "force", { force = vmath.vector3(0,10000000,0) })
	end)
	msg.post("/defluid", "dry")			-- activate drying (dry a metaball every second)

	
	input.acquire()
	input_mapper.bind(triggers.KEY_LEFT, LEFT)
	input_mapper.bind(triggers.KEY_RIGHT, RIGHT)
	input_mapper.bind(triggers.KEY_A, LEFT)
	input_mapper.bind(triggers.KEY_D, RIGHT)
	input_mapper.bind(triggers.KEY_SPACE, JUMP)
	local presed_inputs = {}
	local pressed = hash("pressed")
	local released = hash("released")
	self.msgs = router()
	self.press = router()
	self.release = router()
	self.input = router(function (listeners, action_id, action)
		if action_id == nil then return end
		local state = pressed
		if action.released then state = released end
		if presed_inputs[action_id] ~= state then
			presed_inputs[action_id] = state
			if action.pressed then
				self.press.proc(action_id, action)
			elseif action.released then
				self.release.proc(action_id, action)
			end
		end
		return listeners[action_id]
	end)

	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_SHAPES,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				-- [hash("platform")] = platypus.DIR_DOWN,
			},
			left = 7, right = 7, top = 14, bottom = 14, offset = vmath.vector3(0, 0, 0)
		},
		gravity = -800,
		max_velocity = 280,
		--allow_double_jump = false,
		--allow_wall_jump = false,
		--allow_wall_slide = false,
		--wall_slide_gravity = -50
	})

	function left()
		self.platypus.left(ground_contact(self) and 120 or 100)
	end
	function right()
		self.platypus.right(ground_contact(self) and 120 or 100)
	end
	function jump()
		self.platypus.jump(ground_contact(self) and 280 or 100)
	end

	self.input
	.on(LEFT, left)
	.on(RIGHT, right)
	.on(JUMP, jump)

	self.press
	.on(LEFT, anim("run-left"))
	.on(RIGHT, anim("run-right"))

	self.release
	.on(LEFT, anim("idle"))
	.on(RIGHT, anim("idle"))

	self.msgs
	.on(platypus.FALLING, anim("fall"))
	.on(platypus.GROUND_CONTACT, anim("idle"))
	.on(platypus.JUMP, anim("jump"))
end

function update(self, dt)
	self.platypus.update(dt)
end
function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message)
	self.msgs.proc(message_id, message, sender)
end
function on_input(self, action_id, action)
	action_id = input_mapper.on_input(action_id)
	input.on_input(action_id, action)
	self.input.proc(action_id, action)
end
